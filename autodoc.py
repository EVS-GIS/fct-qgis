# -*- coding: utf-8 -*-

"""
Generate algorithm reference documentation
from YAML metadata in the source code.

The documentation is generated in directory `docs/algorithms`.

***************************************************************************
*                                                                         *
*   This program is free software; you can redistribute it and/or modify  *
*   it under the terms of the GNU General Public License as published by  *
*   the Free Software Foundation; either version 2 of the License, or     *
*   (at your option) any later version.                                   *
*                                                                         *
***************************************************************************
"""

import sys
import os
from jinja2 import Environment
from collections import defaultdict

sys.path.append(os.path.expandvars('$QGIS_PREFIX/share/qgis/python/plugins'))
sys.path.append(os.path.expandvars('$HOME/.local/share/QGIS/QGIS3/profiles/default/python/plugins'))

from FluvialCorridorToolbox.FluvialCorridorToolbox import FluvialCorridorToolboxProvider

provider = FluvialCorridorToolboxProvider()
provider.loadAlgorithms()
algs = {a.name(): a for a in provider.algorithms()}

if not os.path.isdir('docs/algorithms') and not os.path.exists('docs/algorithms'):
    os.mkdir('docs/algorithms')

ALGORITHM_TEMPLATE = """---
title: {{ displayName }}
---

[comment]: # (Autogenerated - Do Not Edit This File)

# {{ displayName }}

## Summary

{{ shortDescription }}

<p>Tags: <code>{{ tags | join('</code>, <code>') }}</code></p>

## Usage

{{ helpString }}

## Parameters

<table>
    <thead>
        <tr>
            <th>Parameter</th>
            <th>Description</th>
            <th>Type</th>
        </tr>
    </thead>
    <tbody>
{% for p in parameters: %}
        <tr>
            <td>
                {{ p.shortDescription }}</br>
                <code>{{ p.name }}</code>
            </td>
            <td>
                {{ p.description }}
                </br>
                {% if p.defaultValue %}
                Default value: <code>{{ p.defaultValue }}</code>
                {% endif %}
            </td>
            <td>
                {{ p.type }}
            </td>
        </tr>
{% endfor %}
    </tbody>
</table>

{% if example %}
## Example

{{ example }}
{% endif %}

{% if seealso %}
## See Also

{{ seealso }}
{% endif %}
"""

ALGORITHM_JINJA = Environment().from_string(ALGORITHM_TEMPLATE)

GROUP_TEMPLATE = """---
title: {{ group }}
---

# {{ group }}

<ul>
{% for link, title in algorithms %}
    <li>
        <a href="{{ link }}">{{ title }}</a>
    </li>
{% endfor %}
<ul>
"""

GROUP_JINJA = Environment().from_string(GROUP_TEMPLATE)

def unindent(text):

    return '\n'.join([s.lstrip() for s in text.split('\n')])

groupDescription = dict()
groups = defaultdict(list)

for name, alg in algs.items():

    if not hasattr(alg, 'METADATA'):
        continue

    metadata = alg.METADATA.copy()
    group = metadata['groupId']
    directory = os.path.join('docs/algorithms', group)
    key = alg.__class__.__name__
    filename = os.path.join(directory, key + '.md')

    if not os.path.isdir(directory) and not os.path.exists(directory):
        os.mkdir(directory)

    parameters = list()

    for p in alg.parameterDefinitions():
        if 'parameters' in metadata:
            if p.name() in metadata['parameters']:
                param = metadata['parameters'][p.name()].copy()
                param.update(
                    name=p.name(),
                    shortDescription=p.description() or '',
                    defaultValue=p.defaultValue())
                parameters.append(param)
        else:
            parameters.append({
                'name': p.name(),
                'shortDescription': p.description() or '',
                'type': type(p).__name__,
                'defaultValue': p.defaultValue()
            })

    description = metadata.get('shortDescription', alg.__doc__)

    metadata.update(
        shortDescription=unindent(description or ''),
        helpString=metadata.get('helpString', None) or 'No Description Yet.',
        parameters=parameters,
        tags=[tag for tag in metadata.get('tags', [])])

    with open(filename, 'w') as output:
        output.write(ALGORITHM_JINJA.render(metadata))

    groupDescription[group] = alg.group()
    groups[group].append((key, alg.displayName()))

for group in groups:

    filename = os.path.join('docs/algorithms', group, 'index.md')

    with open(filename, 'w') as output:
        output.write(GROUP_JINJA.render({
            'group': groupDescription[group],
            'algorithms': groups[group]
        }))
